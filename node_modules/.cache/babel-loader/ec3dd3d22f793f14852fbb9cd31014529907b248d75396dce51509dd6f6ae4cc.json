{"ast":null,"code":"import React from\"react\";import{useDispatch,useSelector}from\"react-redux\";import boardsSlice from\"../redux/boardsSlice\";import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";export default function Subtask(_ref){let{index,taskIndex,colIndex}=_ref;const dispatch=useDispatch();const boards=useSelector(state=>state.boards);const board=boards.find(board=>board.isActive===true);const col=board.columns.find((col,i)=>i===colIndex);const task=col.tasks.find((task,i)=>i===taskIndex);const subtask=task.subtasks.find((subtask,i)=>i===index);const checked=subtask.isCompleted;const onChange=e=>{dispatch(boardsSlice.actions.setSubtaskCompleted({index,taskIndex,colIndex}));};return/*#__PURE__*/_jsxs(\"div\",{className:\"subtask\",children:[/*#__PURE__*/_jsx(\"input\",{className:\"subtask-checkbox\",type:\"checkbox\",checked:checked,onChange:onChange}),/*#__PURE__*/_jsx(\"p\",{className:\"subtask-text text-M \".concat(checked&&\"checked\"),children:subtask.title})]});}","map":{"version":3,"names":["React","useDispatch","useSelector","boardsSlice","jsx","_jsx","jsxs","_jsxs","Subtask","_ref","index","taskIndex","colIndex","dispatch","boards","state","board","find","isActive","col","columns","i","task","tasks","subtask","subtasks","checked","isCompleted","onChange","e","actions","setSubtaskCompleted","className","children","type","concat","title"],"sources":["D:/task management app/kanban-task-management-web-app/src/components/Subtask.js"],"sourcesContent":["import React from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport boardsSlice from \"../redux/boardsSlice\";\r\n\r\nexport default function Subtask({ index, taskIndex, colIndex }) {\r\n  const dispatch = useDispatch();\r\n  const boards = useSelector((state) => state.boards);\r\n  const board = boards.find((board) => board.isActive === true);\r\n  const col = board.columns.find((col, i) => i === colIndex);\r\n  const task = col.tasks.find((task, i) => i === taskIndex);\r\n  const subtask = task.subtasks.find((subtask, i) => i === index);\r\n  const checked = subtask.isCompleted;\r\n\r\n  const onChange = (e) => {\r\n    dispatch(\r\n      boardsSlice.actions.setSubtaskCompleted({ index, taskIndex, colIndex })\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"subtask\">\r\n      <input\r\n        className=\"subtask-checkbox\"\r\n        type=\"checkbox\"\r\n        checked={checked}\r\n        onChange={onChange}\r\n      />\r\n      <p className={`subtask-text text-M ${checked && \"checked\"}`}>\r\n        {subtask.title}\r\n      </p>\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,KAAM,OAAO,CACzB,OAASC,WAAW,CAAEC,WAAW,KAAQ,aAAa,CACtD,MAAO,CAAAC,WAAW,KAAM,sBAAsB,CAAC,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBAE/C,cAAe,SAAS,CAAAC,OAAOA,CAAAC,IAAA,CAAiC,IAAhC,CAAEC,KAAK,CAAEC,SAAS,CAAEC,QAAS,CAAC,CAAAH,IAAA,CAC5D,KAAM,CAAAI,QAAQ,CAAGZ,WAAW,CAAC,CAAC,CAC9B,KAAM,CAAAa,MAAM,CAAGZ,WAAW,CAAEa,KAAK,EAAKA,KAAK,CAACD,MAAM,CAAC,CACnD,KAAM,CAAAE,KAAK,CAAGF,MAAM,CAACG,IAAI,CAAED,KAAK,EAAKA,KAAK,CAACE,QAAQ,GAAK,IAAI,CAAC,CAC7D,KAAM,CAAAC,GAAG,CAAGH,KAAK,CAACI,OAAO,CAACH,IAAI,CAAC,CAACE,GAAG,CAAEE,CAAC,GAAKA,CAAC,GAAKT,QAAQ,CAAC,CAC1D,KAAM,CAAAU,IAAI,CAAGH,GAAG,CAACI,KAAK,CAACN,IAAI,CAAC,CAACK,IAAI,CAAED,CAAC,GAAKA,CAAC,GAAKV,SAAS,CAAC,CACzD,KAAM,CAAAa,OAAO,CAAGF,IAAI,CAACG,QAAQ,CAACR,IAAI,CAAC,CAACO,OAAO,CAAEH,CAAC,GAAKA,CAAC,GAAKX,KAAK,CAAC,CAC/D,KAAM,CAAAgB,OAAO,CAAGF,OAAO,CAACG,WAAW,CAEnC,KAAM,CAAAC,QAAQ,CAAIC,CAAC,EAAK,CACtBhB,QAAQ,CACNV,WAAW,CAAC2B,OAAO,CAACC,mBAAmB,CAAC,CAAErB,KAAK,CAAEC,SAAS,CAAEC,QAAS,CAAC,CACxE,CAAC,CACH,CAAC,CAED,mBACEL,KAAA,QAAKyB,SAAS,CAAC,SAAS,CAAAC,QAAA,eACtB5B,IAAA,UACE2B,SAAS,CAAC,kBAAkB,CAC5BE,IAAI,CAAC,UAAU,CACfR,OAAO,CAAEA,OAAQ,CACjBE,QAAQ,CAAEA,QAAS,CACpB,CAAC,cACFvB,IAAA,MAAG2B,SAAS,wBAAAG,MAAA,CAAyBT,OAAO,EAAI,SAAS,CAAG,CAAAO,QAAA,CACzDT,OAAO,CAACY,KAAK,CACb,CAAC,EACD,CAAC,CAEV","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}